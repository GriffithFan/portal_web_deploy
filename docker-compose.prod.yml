version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: portal-meraki-backend:latest
    container_name: portal-meraki-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - ./backend/.env
    volumes:
      - ./backend/data:/app/data
    networks:
      - portal-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://127.0.0.1:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  reverse:
    image: nginx:1.26-alpine
    container_name: portal-meraki-reverse
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    volumes:
      - ./deploy/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./deploy/nginx/html:/usr/share/nginx/html:ro
      - ./deploy/nginx/certs:/etc/letsencrypt
      - ./deploy/nginx/www:/var/www/certbot
    networks:
      - portal-network

  certbot:
    image: certbot/certbot
    container_name: portal-meraki-certbot
    entrypoint: ""
    volumes:
      - ./deploy/nginx/certs:/etc/letsencrypt
      - ./deploy/nginx/www:/var/www/certbot
    networks:
      - portal-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    image: portal-meraki-frontend:latest
    container_name: portal-meraki-frontend
    restart: unless-stopped
    ports:
      - "80:5173" # Servir la app en el puerto 80 del host
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - portal-network

networks:
  portal-network:
    driver: bridge
